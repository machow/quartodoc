[
  {
    "objectID": "reference/Builder.html",
    "href": "reference/Builder.html",
    "title": "Builder",
    "section": "",
    "text": "Builder(\n    self\n    package\n    sections=tuple()\n    options=None\n    version=None\n    dir='reference'\n    title='Function reference'\n    renderer='markdown'\n    out_index=None\n    sidebar=None\n    css=None\n    rewrite_all_pages=False\n    source_dir=None\n    dynamic=None\n    parser='numpy'\n    render_interlinks=False\n    _fast_inventory=False\n)\nBase class for building API docs.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npackage\nstr\nThe name of the package.\nrequired\n\n\nsections\n'list[Any]'\nA list of sections, with items to document.\ntuple()\n\n\nversion\n'str | None'\nThe package version. By default this attempts to look up the current package version (TODO).\nNone\n\n\ndir\nstr\nName of API directory.\n'reference'\n\n\ntitle\nstr\nTitle of the API index page.\n'Function reference'\n\n\nrenderer\n'dict | Renderer | str'\nThe renderer used to convert docstrings (e.g. to markdown).\n'markdown'\n\n\noptions\n'dict | None'\nDefault options to set for all pieces of content (e.g. include_attributes).\nNone\n\n\nout_index\nstr\nThe output path of the index file, used to list all API functions.\nNone\n\n\nsidebar\n'str | None'\nThe output path for a sidebar yaml config (by default no config generated).\nNone\n\n\ncss\n'str | None'\nThe output path for the default css styles.\nNone\n\n\nrewrite_all_pages\n\nWhether to rewrite all rendered doc pages, or only those with changes.\nFalse\n\n\nsource_dir\n'str | None'\nA directory where source files to be documented live. This is only necessary if you are not documenting a package, but collection of scripts. Use a \".\" to refer to the current directory.\nNone\n\n\ndynamic\nbool | None\nWhether to dynamically load all python objects. By default, objects are loaded using static analysis.\nNone\n\n\nrender_interlinks\nbool\nWhether to render interlinks syntax inside documented objects. Note that the interlinks filter is required to generate the links in quarto.\nFalse\n\n\nparser\n\nDocstring parser to use. This correspond to different docstring styles, and can be one of \"google\", \"sphinx\", and \"numpy\". Defaults to \"numpy\".\n'numpy'\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nitems\nDocumented items by this builder\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nbuild\nBuild index page, sphinx inventory, and individual doc pages.\n\n\ncreate_inventory\nGenerate sphinx inventory object.\n\n\nfrom_quarto_config\nConstruct a Builder from a configuration object (or yaml file).\n\n\nwrite_css\nWrite default css styles to a file.\n\n\nwrite_doc_pages\nWrite individual function documentation pages.\n\n\nwrite_index\nWrite API index page.\n\n\nwrite_sidebar\nWrite a yaml config file for API sidebar.\n\n\n\n\n\nBuilder.build(filter='*')\nBuild index page, sphinx inventory, and individual doc pages.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfilter\nstr\nA simple pattern, that may include * as a wildcard. If specified, only doc paths for objects with matching names will be written. Path is the file's base name in the API dir (e.g. MdRenderer.render)\n'*'\n\n\n\n\n\n\n\nBuilder.create_inventory(items)\nGenerate sphinx inventory object.\n\n\n\nBuilder.from_quarto_config(quarto_cfg)\nConstruct a Builder from a configuration object (or yaml file).\n\n\n\nBuilder.write_css()\nWrite default css styles to a file.\n\n\n\nBuilder.write_doc_pages(pages, filter)\nWrite individual function documentation pages.\n\n\n\nBuilder.write_index(blueprint)\nWrite API index page.\n\n\n\nBuilder.write_sidebar(blueprint)\nWrite a yaml config file for API sidebar."
  },
  {
    "objectID": "reference/Builder.html#parameters",
    "href": "reference/Builder.html#parameters",
    "title": "Builder",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\npackage\nstr\nThe name of the package.\nrequired\n\n\nsections\n'list[Any]'\nA list of sections, with items to document.\ntuple()\n\n\nversion\n'str | None'\nThe package version. By default this attempts to look up the current package version (TODO).\nNone\n\n\ndir\nstr\nName of API directory.\n'reference'\n\n\ntitle\nstr\nTitle of the API index page.\n'Function reference'\n\n\nrenderer\n'dict | Renderer | str'\nThe renderer used to convert docstrings (e.g. to markdown).\n'markdown'\n\n\noptions\n'dict | None'\nDefault options to set for all pieces of content (e.g. include_attributes).\nNone\n\n\nout_index\nstr\nThe output path of the index file, used to list all API functions.\nNone\n\n\nsidebar\n'str | None'\nThe output path for a sidebar yaml config (by default no config generated).\nNone\n\n\ncss\n'str | None'\nThe output path for the default css styles.\nNone\n\n\nrewrite_all_pages\n\nWhether to rewrite all rendered doc pages, or only those with changes.\nFalse\n\n\nsource_dir\n'str | None'\nA directory where source files to be documented live. This is only necessary if you are not documenting a package, but collection of scripts. Use a \".\" to refer to the current directory.\nNone\n\n\ndynamic\nbool | None\nWhether to dynamically load all python objects. By default, objects are loaded using static analysis.\nNone\n\n\nrender_interlinks\nbool\nWhether to render interlinks syntax inside documented objects. Note that the interlinks filter is required to generate the links in quarto.\nFalse\n\n\nparser\n\nDocstring parser to use. This correspond to different docstring styles, and can be one of \"google\", \"sphinx\", and \"numpy\". Defaults to \"numpy\".\n'numpy'"
  },
  {
    "objectID": "reference/Builder.html#attributes",
    "href": "reference/Builder.html#attributes",
    "title": "Builder",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nitems\nDocumented items by this builder"
  },
  {
    "objectID": "reference/Builder.html#methods",
    "href": "reference/Builder.html#methods",
    "title": "Builder",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nbuild\nBuild index page, sphinx inventory, and individual doc pages.\n\n\ncreate_inventory\nGenerate sphinx inventory object.\n\n\nfrom_quarto_config\nConstruct a Builder from a configuration object (or yaml file).\n\n\nwrite_css\nWrite default css styles to a file.\n\n\nwrite_doc_pages\nWrite individual function documentation pages.\n\n\nwrite_index\nWrite API index page.\n\n\nwrite_sidebar\nWrite a yaml config file for API sidebar.\n\n\n\n\n\nBuilder.build(filter='*')\nBuild index page, sphinx inventory, and individual doc pages.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfilter\nstr\nA simple pattern, that may include * as a wildcard. If specified, only doc paths for objects with matching names will be written. Path is the file's base name in the API dir (e.g. MdRenderer.render)\n'*'\n\n\n\n\n\n\n\nBuilder.create_inventory(items)\nGenerate sphinx inventory object.\n\n\n\nBuilder.from_quarto_config(quarto_cfg)\nConstruct a Builder from a configuration object (or yaml file).\n\n\n\nBuilder.write_css()\nWrite default css styles to a file.\n\n\n\nBuilder.write_doc_pages(pages, filter)\nWrite individual function documentation pages.\n\n\n\nBuilder.write_index(blueprint)\nWrite API index page.\n\n\n\nBuilder.write_sidebar(blueprint)\nWrite a yaml config file for API sidebar."
  },
  {
    "objectID": "reference/preview.html",
    "href": "reference/preview.html",
    "title": "preview",
    "section": "",
    "text": "preview(ast, max_depth=999, compact=False, as_string=False)\nPrint a friendly representation of a griffe object (e.g. function, docstring)\n\n\n&gt;&gt;&gt; from quartodoc import get_object\n&gt;&gt;&gt; obj = get_object(\"quartodoc\", \"get_object\")\n&gt;&gt;&gt; preview(obj.docstring.parsed)\n...\n&gt;&gt;&gt; preview(obj)\n..."
  },
  {
    "objectID": "reference/preview.html#examples",
    "href": "reference/preview.html#examples",
    "title": "preview",
    "section": "",
    "text": "&gt;&gt;&gt; from quartodoc import get_object\n&gt;&gt;&gt; obj = get_object(\"quartodoc\", \"get_object\")\n&gt;&gt;&gt; preview(obj.docstring.parsed)\n...\n&gt;&gt;&gt; preview(obj)\n..."
  },
  {
    "objectID": "reference/blueprint.html",
    "href": "reference/blueprint.html",
    "title": "blueprint",
    "section": "",
    "text": "blueprint(el, package=None, dynamic=None, parser='numpy')\nConvert a configuration element to something that is ready to render.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nel\n_Base\nAn element, like layout.Auto, to transform.\nrequired\n\n\npackage\nstr\nA base package name. If specified, this is prepended to the names of any objects.\nNone\n\n\ndynamic\nNone | bool\nWhether to dynamically load objects. Defaults to using static analysis.\nNone\n\n\n\n\n\n\n&gt;&gt;&gt; from quartodoc import blueprint\n&gt;&gt;&gt; from quartodoc.layout import Auto\n&gt;&gt;&gt; blueprint(Auto(name = \"quartodoc.get_object\"))\nDocFunction(name='quartodoc.get_object', ...)\n&gt;&gt;&gt; blueprint(Auto(name = \"get_object\"), package = \"quartodoc\")\nDocFunction(name='get_object', ...)"
  },
  {
    "objectID": "reference/blueprint.html#parameters",
    "href": "reference/blueprint.html#parameters",
    "title": "blueprint",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nel\n_Base\nAn element, like layout.Auto, to transform.\nrequired\n\n\npackage\nstr\nA base package name. If specified, this is prepended to the names of any objects.\nNone\n\n\ndynamic\nNone | bool\nWhether to dynamically load objects. Defaults to using static analysis.\nNone"
  },
  {
    "objectID": "reference/blueprint.html#examples",
    "href": "reference/blueprint.html#examples",
    "title": "blueprint",
    "section": "",
    "text": "&gt;&gt;&gt; from quartodoc import blueprint\n&gt;&gt;&gt; from quartodoc.layout import Auto\n&gt;&gt;&gt; blueprint(Auto(name = \"quartodoc.get_object\"))\nDocFunction(name='quartodoc.get_object', ...)\n&gt;&gt;&gt; blueprint(Auto(name = \"get_object\"), package = \"quartodoc\")\nDocFunction(name='get_object', ...)"
  },
  {
    "objectID": "reference/convert_inventory.html",
    "href": "reference/convert_inventory.html",
    "title": "convert_inventory",
    "section": "",
    "text": "convert_inventory(in_name, out_name=None)\nConvert a sphinx inventory file to json.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nin_name\n'Union[str, soi.Inventory]'\nName of inventory file.\nrequired\n\n\nout_name\n\nOutput file name.\nNone"
  },
  {
    "objectID": "reference/convert_inventory.html#parameters",
    "href": "reference/convert_inventory.html#parameters",
    "title": "convert_inventory",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nin_name\n'Union[str, soi.Inventory]'\nName of inventory file.\nrequired\n\n\nout_name\n\nOutput file name.\nNone"
  },
  {
    "objectID": "reference/create_inventory.html",
    "href": "reference/create_inventory.html",
    "title": "create_inventory",
    "section": "",
    "text": "create_inventory(\n    project\n    version\n    items\n    uri=lambda s: f'{s.canonical_path}.html'\n    dispname='-'\n)\nReturn a sphinx inventory file.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nproject\nstr\nName of the project (often the package name).\nrequired\n\n\nversion\nstr\nVersion of the project (often the package version).\nrequired\n\n\nitems\n'list[dc.Object | dc.Alias]'\nA docstring parser to use.\nrequired\n\n\nuri\n'str | Callable[dc.Object, str]'\nLink relative to the docs where the items documentation lives.\nlambda s: f'{s.canonical_path}.html'\n\n\ndispname\n'str | Callable[dc.Object, str]'\nName to be shown when a link to the item is made.\n'-'\n\n\n\n\n\n\n&gt;&gt;&gt; f_obj = get_object(\"quartodoc\", \"create_inventory\")\n&gt;&gt;&gt; inv = create_inventory(\"example\", \"0.0\", [f_obj])\n&gt;&gt;&gt; inv\nInventory(project='example', version='0.0', source_type=&lt;SourceTypes.Manual: 'manual'&gt;)\nTo preview the inventory, we can convert it to a dictionary:\n&gt;&gt;&gt; _to_clean_dict(inv)\n{'project': 'example',\n 'version': '0.0',\n 'count': 1,\n 'items': [{'name': 'quartodoc.create_inventory',\n   'domain': 'py',\n   'role': 'function',\n   'priority': '1',\n   'uri': 'quartodoc.create_inventory.html',\n   'dispname': '-'}]}"
  },
  {
    "objectID": "reference/create_inventory.html#parameters",
    "href": "reference/create_inventory.html#parameters",
    "title": "create_inventory",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nproject\nstr\nName of the project (often the package name).\nrequired\n\n\nversion\nstr\nVersion of the project (often the package version).\nrequired\n\n\nitems\n'list[dc.Object | dc.Alias]'\nA docstring parser to use.\nrequired\n\n\nuri\n'str | Callable[dc.Object, str]'\nLink relative to the docs where the items documentation lives.\nlambda s: f'{s.canonical_path}.html'\n\n\ndispname\n'str | Callable[dc.Object, str]'\nName to be shown when a link to the item is made.\n'-'"
  },
  {
    "objectID": "reference/create_inventory.html#examples",
    "href": "reference/create_inventory.html#examples",
    "title": "create_inventory",
    "section": "",
    "text": "&gt;&gt;&gt; f_obj = get_object(\"quartodoc\", \"create_inventory\")\n&gt;&gt;&gt; inv = create_inventory(\"example\", \"0.0\", [f_obj])\n&gt;&gt;&gt; inv\nInventory(project='example', version='0.0', source_type=&lt;SourceTypes.Manual: 'manual'&gt;)\nTo preview the inventory, we can convert it to a dictionary:\n&gt;&gt;&gt; _to_clean_dict(inv)\n{'project': 'example',\n 'version': '0.0',\n 'count': 1,\n 'items': [{'name': 'quartodoc.create_inventory',\n   'domain': 'py',\n   'role': 'function',\n   'priority': '1',\n   'uri': 'quartodoc.create_inventory.html',\n   'dispname': '-'}]}"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "quartodoc is a package for building delightful python API documentation.\n\n\n\nget_object\nFetch a griffe object.\n\n\nBuilder\nBase class for building API docs.\n\n\nMdRenderer\nRender docstrings to markdown.\n\n\nconvert_inventory\nConvert a sphinx inventory file to json.\n\n\ncreate_inventory\nReturn a sphinx inventory file.\n\n\npreview\nPrint a friendly representation of a griffe object (e.g. function, docstring)\n\n\nblueprint\nConvert a configuration element to something that is ready to render.\n\n\ncollect\nReturn all pages and items in a layout.\n\n\nAuto\nConfigure a python object to document (e.g. module, class, function, attribute)."
  },
  {
    "objectID": "reference/index.html#quartodoc",
    "href": "reference/index.html#quartodoc",
    "title": "Function reference",
    "section": "",
    "text": "quartodoc is a package for building delightful python API documentation.\n\n\n\nget_object\nFetch a griffe object.\n\n\nBuilder\nBase class for building API docs.\n\n\nMdRenderer\nRender docstrings to markdown.\n\n\nconvert_inventory\nConvert a sphinx inventory file to json.\n\n\ncreate_inventory\nReturn a sphinx inventory file.\n\n\npreview\nPrint a friendly representation of a griffe object (e.g. function, docstring)\n\n\nblueprint\nConvert a configuration element to something that is ready to render.\n\n\ncollect\nReturn all pages and items in a layout.\n\n\nAuto\nConfigure a python object to document (e.g. module, class, function, attribute)."
  },
  {
    "objectID": "reference/MdRenderer.html",
    "href": "reference/MdRenderer.html",
    "title": "MdRenderer",
    "section": "",
    "text": "MdRenderer(\n    self\n    header_level=1\n    show_signature=True\n    show_signature_annotations=False\n    display_name='relative'\n    hook_pre=None\n    render_interlinks=False\n    table_style='table'\n)\nRender docstrings to markdown.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nheader_level\nint\nThe level of the header (e.g. 1 is the biggest).\n1\n\n\nshow_signature\nbool\nWhether to show the function signature.\nTrue\n\n\nshow_signature_annotations\nbool\nWhether to show annotations in the function signature.\nFalse\n\n\ndisplay_name\nstr\nThe default name shown for documented functions. Either \"name\", \"relative\", \"full\", or \"canonical\". These options range from just the function name, to its full path relative to its package, to including the package name, to its the its full path relative to its .__module__.\n'relative'\n\n\n\n\n\n\n&gt;&gt;&gt; from quartodoc import MdRenderer, get_object\n&gt;&gt;&gt; renderer = MdRenderer(header_level=2)\n&gt;&gt;&gt; f = get_object(\"quartodoc\", \"get_object\")\n&gt;&gt;&gt; print(renderer.render(f)[:81])\n## get_object\n`get_object(module: str, object_name: str, parser: str = 'numpy')`\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nsummarize\nTest\n\n\n\n\n\nMdRenderer.summarize(obj)\nTest"
  },
  {
    "objectID": "reference/MdRenderer.html#parameters",
    "href": "reference/MdRenderer.html#parameters",
    "title": "MdRenderer",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nheader_level\nint\nThe level of the header (e.g. 1 is the biggest).\n1\n\n\nshow_signature\nbool\nWhether to show the function signature.\nTrue\n\n\nshow_signature_annotations\nbool\nWhether to show annotations in the function signature.\nFalse\n\n\ndisplay_name\nstr\nThe default name shown for documented functions. Either \"name\", \"relative\", \"full\", or \"canonical\". These options range from just the function name, to its full path relative to its package, to including the package name, to its the its full path relative to its .__module__.\n'relative'"
  },
  {
    "objectID": "reference/MdRenderer.html#examples",
    "href": "reference/MdRenderer.html#examples",
    "title": "MdRenderer",
    "section": "",
    "text": "&gt;&gt;&gt; from quartodoc import MdRenderer, get_object\n&gt;&gt;&gt; renderer = MdRenderer(header_level=2)\n&gt;&gt;&gt; f = get_object(\"quartodoc\", \"get_object\")\n&gt;&gt;&gt; print(renderer.render(f)[:81])\n## get_object\n`get_object(module: str, object_name: str, parser: str = 'numpy')`"
  },
  {
    "objectID": "reference/MdRenderer.html#methods",
    "href": "reference/MdRenderer.html#methods",
    "title": "MdRenderer",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nsummarize\nTest\n\n\n\n\n\nMdRenderer.summarize(obj)\nTest"
  },
  {
    "objectID": "reference/collect.html",
    "href": "reference/collect.html",
    "title": "collect",
    "section": "",
    "text": "collect(el, base_dir)\nReturn all pages and items in a layout.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nel\nlayout._Base\nAn element, like layout.Section or layout.Page, to collect pages and items from.\nrequired\n\n\nbase_dir\nstr\nThe directory where API pages will live.\nrequired"
  },
  {
    "objectID": "reference/collect.html#parameters",
    "href": "reference/collect.html#parameters",
    "title": "collect",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nel\nlayout._Base\nAn element, like layout.Section or layout.Page, to collect pages and items from.\nrequired\n\n\nbase_dir\nstr\nThe directory where API pages will live.\nrequired"
  },
  {
    "objectID": "reference/Auto.html",
    "href": "reference/Auto.html",
    "title": "Auto",
    "section": "",
    "text": "Auto(self, **kwargs)\nConfigure a python object to document (e.g. module, class, function, attribute).\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\nstr\nName of the object. This should be the path needed to import it.\n\n\nsignature_name\n\nStyle of name to use in the signature. Can be \"relative\", \"full\", or \"short\". Relative is whatever was used as the name argument, full is the fully qualified path the object, and short is the name of the object (i.e. no periods).\n\n\nmembers\n\nA list of members, such as attributes or methods on a class, to document. If members is specified, no other includes or excludes are applied.\n\n\ninclude_private\n\nWhether to include members starting with \"_\"\n\n\ninclude_imports\n\nWhether to include members that were imported from somewhere else.\n\n\ninclude_empty\n\nWhether to include members with no docstring.\n\n\ninclude_inherited\n\nWhether to include members inherited from a parent class.\n\n\ninclude_attributes\n\nWhether to include attributes.\n\n\ninclude_classes\n\nWhether to include classes.\n\n\ninclude_functions\n\nWhether to include functions.\n\n\ninclude\n\n(Not implemented). A list of members to include.\n\n\nexclude\n\nA list of members to exclude. This is performed last, in order to subtract from the results of options like include_functions.\n\n\ndynamic\n\nWhether to dynamically load docstring. By default docstrings are loaded using static analysis. dynamic may be a string pointing to another object, to return an alias for that object.\n\n\nchildren\n\nStyle for presenting members. Either separate, embedded, or flat.\n\n\npackage\n\nIf specified, object lookup will be relative to this path.\n\n\nmember_order\n\nOrder to present members in, either \"alphabetical\" or \"source\" order. Defaults to alphabetical sorting.\n\n\nmember_options\n\nOptions to apply to members. These can include any of the options above."
  },
  {
    "objectID": "reference/Auto.html#attributes",
    "href": "reference/Auto.html#attributes",
    "title": "Auto",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\nstr\nName of the object. This should be the path needed to import it.\n\n\nsignature_name\n\nStyle of name to use in the signature. Can be \"relative\", \"full\", or \"short\". Relative is whatever was used as the name argument, full is the fully qualified path the object, and short is the name of the object (i.e. no periods).\n\n\nmembers\n\nA list of members, such as attributes or methods on a class, to document. If members is specified, no other includes or excludes are applied.\n\n\ninclude_private\n\nWhether to include members starting with \"_\"\n\n\ninclude_imports\n\nWhether to include members that were imported from somewhere else.\n\n\ninclude_empty\n\nWhether to include members with no docstring.\n\n\ninclude_inherited\n\nWhether to include members inherited from a parent class.\n\n\ninclude_attributes\n\nWhether to include attributes.\n\n\ninclude_classes\n\nWhether to include classes.\n\n\ninclude_functions\n\nWhether to include functions.\n\n\ninclude\n\n(Not implemented). A list of members to include.\n\n\nexclude\n\nA list of members to exclude. This is performed last, in order to subtract from the results of options like include_functions.\n\n\ndynamic\n\nWhether to dynamically load docstring. By default docstrings are loaded using static analysis. dynamic may be a string pointing to another object, to return an alias for that object.\n\n\nchildren\n\nStyle for presenting members. Either separate, embedded, or flat.\n\n\npackage\n\nIf specified, object lookup will be relative to this path.\n\n\nmember_order\n\nOrder to present members in, either \"alphabetical\" or \"source\" order. Defaults to alphabetical sorting.\n\n\nmember_options\n\nOptions to apply to members. These can include any of the options above."
  },
  {
    "objectID": "reference/get_object.html",
    "href": "reference/get_object.html",
    "title": "get_object",
    "section": "",
    "text": "get_object(\n    path\n    object_name=None\n    parser='numpy'\n    load_aliases=True\n    dynamic=False\n    loader=None\n)\nFetch a griffe object.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npath\nstr\nAn import path to the object. This should have the form path.to.module:object. For example, quartodoc:get_object or quartodoc:MdRenderer.render.\nrequired\n\n\nobject_name\n'str | None'\n(Deprecated). A function name.\nNone\n\n\nparser\nstr\nA docstring parser to use.\n'numpy'\n\n\nload_aliases\n\nFor aliases that were imported from other modules, should we load that module?\nTrue\n\n\ndynamic\n\nWhether to dynamically import object. Useful if docstring is not hard-coded, but was set on object by running python code.\nFalse\n\n\n\n\n\n\npreview: print a user-friendly preview of a griffe object.\n\n\n\n&gt;&gt;&gt; get_function(\"quartodoc\", \"get_function\")\n&lt;Function('get_function', ...\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nx\ndc.Object\nabc"
  },
  {
    "objectID": "reference/get_object.html#parameters",
    "href": "reference/get_object.html#parameters",
    "title": "get_object",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\npath\nstr\nAn import path to the object. This should have the form path.to.module:object. For example, quartodoc:get_object or quartodoc:MdRenderer.render.\nrequired\n\n\nobject_name\n'str | None'\n(Deprecated). A function name.\nNone\n\n\nparser\nstr\nA docstring parser to use.\n'numpy'\n\n\nload_aliases\n\nFor aliases that were imported from other modules, should we load that module?\nTrue\n\n\ndynamic\n\nWhether to dynamically import object. Useful if docstring is not hard-coded, but was set on object by running python code.\nFalse"
  },
  {
    "objectID": "reference/get_object.html#see-also",
    "href": "reference/get_object.html#see-also",
    "title": "get_object",
    "section": "",
    "text": "preview: print a user-friendly preview of a griffe object."
  },
  {
    "objectID": "reference/get_object.html#examples",
    "href": "reference/get_object.html#examples",
    "title": "get_object",
    "section": "",
    "text": "&gt;&gt;&gt; get_function(\"quartodoc\", \"get_function\")\n&lt;Function('get_function', ..."
  },
  {
    "objectID": "reference/get_object.html#returns",
    "href": "reference/get_object.html#returns",
    "title": "get_object",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nx\ndc.Object\nabc"
  }
]